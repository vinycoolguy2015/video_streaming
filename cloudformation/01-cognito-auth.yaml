AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cognito User Pool and Identity Pool for Video Streaming App'

Parameters:
  AppName:
    Type: String
    Default: VideoStreamingApp
    Description: Name of the application

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AppName}-UserPool'
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code for Video Streaming App is {####}'
        EmailSubject: 'Video Streaming App - Verify your email'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: subscription_type
          AttributeDataType: String
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AppName}-Client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${AppName}-IdentityPool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Role for authenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'videostreamingapp-authenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::videostreamingapp-video-content-${AWS::AccountId}/*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AppName}-UserPoolId'
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AppName}-UserPoolClientId'
  
  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${AppName}-IdentityPoolId'
  
  AuthenticatedRoleArn:
    Description: IAM Role ARN for authenticated users
    Value: !GetAtt AuthenticatedRole.Arn
    Export:
      Name: !Sub '${AppName}-AuthenticatedRoleArn'
